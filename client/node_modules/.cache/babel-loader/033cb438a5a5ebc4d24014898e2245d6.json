{"ast":null,"code":"import { takeLatest, put, call, all } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure, signUpSuccess, signUpFailure } from './user.actions';\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithRedirect(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\nexport function* signUp({\n  payload: {\n    email,\n    password,\n    displayName\n  }\n}) {\n  try {\n    yield console.log(\"test: \", email, password, displayName);\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password);\n    yield put(signUpSuccess({\n      user,\n      additionalData: {\n        displayName\n      }\n    }));\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n}\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\n}\nexport function* signInAfterSignUp({\n  payload: {\n    user,\n    additionalData\n  }\n}) {\n  yield getSnapshotFromUserAuth(user, additionalData);\n}\nexport function* onSignUpSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart), call(onSignUpStart), call(onSignUpSuccess)]);\n}","map":{"version":3,"sources":["/Users/khairul/Documents/Projects/crn/crown-clothing/src/redux/user/user.sagas.js"],"names":["takeLatest","put","call","all","UserActionTypes","auth","googleProvider","createUserProfileDocument","getCurrentUser","signInSuccess","signInFailure","signOutSuccess","signOutFailure","signUpSuccess","signUpFailure","getSnapshotFromUserAuth","userAuth","additionalData","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithRedirect","onGoogleSignInStart","GOOGLE_SIGN_IN_START","signInWithEmail","payload","email","password","signInWithEmailAndPassword","onEmailSignInStart","EMAIL_SIGN_IN_START","isUserAuthenticated","onCheckUserSession","CHECK_USER_SESSION","signOut","onSignOutStart","SIGN_OUT_START","signUp","displayName","console","log","createUserWithEmailAndPassword","onSignUpStart","SIGN_UP_START","signInAfterSignUp","onSignUpSuccess","SIGN_UP_SUCCESS","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, put, call, all } from 'redux-saga/effects';\n\nimport UserActionTypes from './user.types';\n\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\n\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure, signUpSuccess, signUpFailure } from './user.actions';\n\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\n\n    try {\n        const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\n        const userSnapshot = yield userRef.get();\n        yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\n    }\n    catch (error) {\n        yield put(signInFailure(error));\n    }\n}\n\nexport function* signInWithGoogle() {\n    try {\n        const { user } = yield auth.signInWithRedirect(googleProvider);\n        yield getSnapshotFromUserAuth(user);\n    } catch (error) {\n        yield put(signInFailure(error));\n    }\n}\n\nexport function* onGoogleSignInStart() {\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n\nexport function* signInWithEmail({ payload: { email, password } }) {\n    try {\n        const { user } = yield auth.signInWithEmailAndPassword(email, password);\n        yield getSnapshotFromUserAuth(user);\n    } catch (error) {\n        yield put(signInFailure(error));\n    }\n}\n\nexport function* onEmailSignInStart() {\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\n\nexport function* isUserAuthenticated() {\n    try {\n        const userAuth = yield getCurrentUser();\n        if (!userAuth) return;\n        yield getSnapshotFromUserAuth(userAuth);\n    } catch (error) {\n        yield put(signInFailure(error));\n    }\n}\n\n\nexport function* onCheckUserSession() { \n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\n\nexport function* signOut() {\n    try {\n        yield auth.signOut();\n        yield put(signOutSuccess());\n    } catch (error) {\n        yield put(signOutFailure(error));\n    }\n}\n\nexport function* onSignOutStart() {\n    yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\n\nexport function* signUp({ payload: { email, password, displayName } }) {\n    try {\n        yield console.log(\"test: \", email, password, displayName);\n        const { user } = yield auth.createUserWithEmailAndPassword(email, password);\n        yield put(signUpSuccess({ user, additionalData: { displayName } }));\n    } catch (error) {\n        yield put(signUpFailure(error));\n    }\n}\n\nexport function* onSignUpStart() {\n    yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\n}\n\nexport function* signInAfterSignUp({payload: { user, additionalData }}) {\n    yield getSnapshotFromUserAuth(user, additionalData);\n}\n\nexport function* onSignUpSuccess() {\n    yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\n}\n\nexport function* userSagas() {\n    yield all([\n        call(onGoogleSignInStart),\n        call(onEmailSignInStart),\n        call(onCheckUserSession),\n        call(onSignOutStart),\n        call(onSignUpStart),\n        call(onSignUpSuccess)\n    ]);\n}\n"]},"metadata":{},"sourceType":"module"}